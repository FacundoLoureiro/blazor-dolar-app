@page "/euro"
@using System.Text.Json
@using BlazorDolarApp.Services
@using BlazorDolarApp.Models
@inject EuroServices EuroServices
@inject ISnackbar Snackbar

@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error" Class="my-2">@errorMessage</MudAlert>
}

<MudTable Items="@euroList" T="Euro" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Moneda</MudTh>
        <MudTh>Nombre</MudTh>
        <MudTh>Compra</MudTh>
        <MudTh>Venta</MudTh>
        <MudTh>Fecha Actualización</MudTh>
    </HeaderContent>
    <RowTemplate>
            <MudTd DataLabel="Moneda">@context.Moneda</MudTd>
            <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
            <MudTd DataLabel="Compra">@context.Compra</MudTd>
            <MudTd DataLabel="Venta">@context.Venta</MudTd>
            <MudTd DataLabel="Fecha Actualización">@context.FechaActualizacion</MudTd>
     
        </RowTemplate>      
    </MudTable>

 
    @code {
    private List<Euro> euroList = new List<Euro>();
    private bool _loading = true;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try{
            _loading = true;           
            string euro = await EuroServices.GetEuroAsync();
            var euroOficial = JsonSerializer.Deserialize<Euro>(euro);
            if (euroOficial != null)
            {
                euroList.Add(euroOficial);          
                Console.WriteLine($"Datos de Euro: {euro}");
            }
    }
    catch (Exception ex)
    {
        errorMessage = $"Error al cargar datos: {ex.Message}";
        Snackbar.Add(errorMessage, Severity.Error);
        
    }
    finally
    {
        _loading = false;
    }    
  }
}

